---
output: html
html-table-processing: none
---

# Code Along in R: Power Generation Table

## Start

Setting up.

```{r}
library(gt)
library(tidyverse)
```

Importing the data.

```{r}
power_generation <- readr::read_csv("data/power-generation.csv")

power_generation
```

Let's get the data into gt.

```{r}
gt_tbl_1 <- gt(power_generation)

gt_tbl_1
```

## tab_source_note() and cols_width()

Add a title to the table to explain contents. Use this title:

"2023 Mean Carbon Intensity (gCO2eq/kWh) and Power Consumption Breakdown (%)"

and make sure 'Carbon Intensity' and 'Power Consumption' are in bold lettering.

```{r}
gt_tbl_2 <- 
    gt_tbl_1 |>
    tab_header(
        title = md(
            "2023 Mean **Carbon Intensity** (gCO2eq/kWh) and **Power Consumption** Breakdown (%)"
        )
    )

gt_tbl_2
```

Add some explanations to the footer of the table (to further explain things).
Provide the data source (`api.electricitymap.org`) and the methodology (linking 
to `https://www.electricitymaps.com/methodology`). Also state that some
emissions factors are based on IPCC 2014 defaults, while some are based on
more accurate regional factors.

```{r}
gt_tbl_3 <- 
    gt_tbl_2 |>
    tab_source_note(
        md(
            '<br><div style="text-align: left;">'
            "**Source**: api.electricitymap.org" 
            " | **Methodology**: https://www.electricitymaps.com/methodology." 
            " Some emissions factors are based on IPCC 2014 defaults, while some are based on more accurate regional factors."
            "<br>All zones are publicly available on the *Carbon intensity and emission factors* tab via Google docs link<br>"
            "</div>"
            "<br>"
        )
    )

gt_tbl_3
```

Make the width of the `Zone` column 120px. All other columns fixed at 85px.

```{r}
gt_tbl_4 <- 
    gt_tbl_3 |>
    cols_width(
        Zone ~ "120px",
        everything() ~ "85px"
    ) 

gt_tbl_4
```

## Formatting Values Within the Table Body

Format the fractional values by turning them into percentages.

```{r}
gt_tbl_5 <-
    gt_tbl_4 |>
    fmt_percent(
        columns = -`CO2 Intensity`,
        decimals = 1
    )

gt_tbl_5
```

Ensure that the `CO2 Intensity` values are formatted as integers.

```{r}
gt_tbl_6 <- gt_tbl_5 |> fmt_integer(columns=`CO2 Intensity`)

gt_tbl_6
```

## data_color()

Color the cells in the `CO2 Intensity` column according to value (in range of 0 to 900). Use this green to brown palette:

```r
c("#00A600", "#E6E600", "#E8C32E", "#D69C4E", "#DC863B", "sienna", "sienna4", "tomato4", "brown")
```

```{r}
gt_tbl_7 <-
    gt_tbl_6 |>
    data_color(
        columns = `CO2 Intensity`,
        palette = c(
            "#00A600", "#E6E600", "#E8C32E",
            "#D69C4E", "#DC863B", "sienna",
            "sienna4", "tomato4", "brown"
        ),
        domain = c(0, 900)
    )

gt_tbl_7
```

Color the cells in the `Hydro` to `Geothermal` columns according to value (in range of 0 to 1). Use this white to green palette:

```r
c( "snow", "chartreuse4", "chartreuse3", "#00A600")
```

```{r}
gt_tbl_8 <-
    gt_tbl_7 |>
    data_color(
        columns = c(Hydro, Nuclear, Wind, Solar, Geothermal),
        palette = c("snow", "chartreuse4", "chartreuse3", "#00A600"),
        domain = c(0, 1)
    )

gt_tbl_8
```

Color the cells in the `Biomass` column according to value (in range of 0 to 0.3). Use this white to light-brown palette:

```r
c("snow", "#EEC900", "#E8C32E", "#D69C4E")
```

```{r}
gt_tbl_9 <-
    gt_tbl_8 |>
    data_color(
        columns = Biomass,
        palette = c("snow", "#EEC900", "#E8C32E", "#D69C4E"),
        domain = c(0, 0.3)
  )

gt_tbl_9
```

Color the cells in the `Gas` to `Oil` columns according to value (in range of 0 to 1). Use this white to dark-brown palette:

```r
c("snow", "#DC863B", "#D69C4E", "sienna4", "tomato4")
```

```{r}
gt_tbl_10 <-
    gt_tbl_9 |>
    data_color(
        columns = Gas:Oil,
        palette = c("snow", "#DC863B", "#D69C4E", "sienna4", "tomato4"),
        domain = c(0, 1)
    )

gt_tbl_10
```

Ensure the remaining body cells have the 'snow' color applied.

```{r}
gt_tbl_11 <-
    gt_tbl_10 |>
    tab_style(
        style = cell_fill(color = "snow"),
        locations = cells_body(columns = c(Zone, Unknown:`Battery Discharge`))
    )

gt_tbl_11
```

## cols_align() and tab_options()

As a starting point, align all cell contents (and the column labels) with center alignment.

```{r}
gt_tbl_12 <- gt_tbl_11 |> cols_align(align = "center")

gt_tbl_12
```

As a tweak, align the `Zone` column to the left.

```{r}
gt_tbl_13 <- gt_tbl_12 |> cols_align(align = "left", columns = Zone)

gt_tbl_13
```

Use the 'humanist' font stack for this table.

```{r}
gt_tbl_14 <- gt_tbl_13 |> opt_table_font(stack = "humanist")

gt_tbl_14
```

Make some serious tweaks to the table with `tab_options()`.

```{r}
gt_tbl_15 <-
    gt_tbl_14 |>
    tab_options(
        source_notes.font.size = "x-small",
        source_notes.padding = "3px",
        data_row.padding = "1px",
        heading.background.color = "antiquewhite",
        source_notes.background.color = "antiquewhite",
        column_labels.background.color = "antiquewhite",
        table.background.color = "snow",
        data_row.padding.horizontal = "3px",
        column_labels.padding.horizontal = "0px"
    )

gt_tbl_15
```
